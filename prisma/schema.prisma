// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model celular {
  id            Int     @id @default(autoincrement())
  marca         String  @db.VarChar(100)
  modelo        String  @db.VarChar(255)
  memoriaRam    Int
  armazenamento Int
  preco         Decimal @db.Decimal(10, 2)
  usuarioId     Int
  usuario       Usuario @relation(fields: [usuarioId], references: [id])
  deleted       Boolean @default(false)

  @@map("celulares")
}

model CelularArquivado {
  id            Int     @id
  marca         String  @db.VarChar(100)
  modelo        String  @db.VarChar(255)
  memoriaRam    Int
  armazenamento Int
  preco         Decimal @db.Decimal(10, 2)
  email         String  @db.VarChar(100)
  usuarioId     Int
  usuario       Usuario @relation(fields: [usuarioId], references: [id])

  @@map("celularArquivados")
}

model Usuario {
  id                  Int                @id @default(autoincrement())
  nome                String             @db.VarChar(100)
  email               String             @db.VarChar(100)
  senha               String             @db.VarChar(255)
  cidade              String             @default("Cidade n√£o informada") @db.VarChar(100)
  ultimoAcesso        DateTime?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  tentativasInvalidas Int                @default(0)
  bloqueadoAte        DateTime?
  dataUltimoBloqueio  DateTime?
  celulares           celular[]
  celularArquivados   CelularArquivado[]
  logs                Log[]

  @@map("usuarios")
}

model Log {
  id          Int      @id @default(autoincrement())
  descricao   String   @db.VarChar(255)
  complemento String   @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  usuario     Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId   Int

  @@map("logs")
}
